# coding=utf-8import numpy as npfrom matplotlib import pyplot as pltimport osn_features = 2  # Number of Featuredata = list()  # List used to read rebuilt data with multiple principal components# Read rebuilt data after dimensionality reductionfor i in range(n_features):    f = open("inClassExample_rebuilt_comp_{}.csv".format(i+1), "r")  # Open file    data.append(f.readlines())  # Read all data in file    f.close()  # Close fileA = []  # List used to store structured data# Format data into numpy matricesfor i in range(n_features):    # Add a zero line in A (Coding trick to define numpy array shape)    A.append(np.array([[0.0 for temp in range(n_features)]]))    # For all lines in data    for j in range(len(data[i])):        # Split data into a list where there is a ',' character        data[i][j] = data[i][j].split(',')        # Append the data[i][j] as a new line into the A[i] numpy matrix        A[i] = np.append(A[i], [np.array(data[i][j], dtype=np.float)], axis=0)    A[i] = np.delete(A[i], 0, 0)  # Remove zero line at the beginning of A# Print all A matricesfor a in A:    print Acomponents = []  # List of eigenvectors (principal components)# Initialize components vectorfor i in range(n_features):    components.append([])    for j in range(n_features):        components[i].append(0.0)components = np.array(components)# Read components from filef = open("inClassExample_components.csv", "r")  # Open filedata = f.readlines()  # Read all dataf.close()  # Close file# Split string data into vectorsfor i in range(len(data)):    data[i] = data[i].split(',')# Store read data into the numpy matrixfor i in range(n_features):    for j in range(n_features):        components[i][j] = np.float(data[i][j])# components = np.transpose(components)# Read Linear regression coefficients from filef = open("inClassExample_coefs.csv", "r")beta = f.readlines()f.close()beta = np.array(beta[0].split(','), dtype=np.float)X = [-10, -1, 0, 1, 10]Y = []Y2 = [beta[0] + x*beta[1] for x in X]for comp in components:    print comp[0], comp[1]    # Y.append([(x*comp[0]/comp[1]) for x in X])    Y.append([(x*comp[1]/comp[0]) for x in X])    # print Y[-1]# Compute the mean of each column in the original dataA_mean = np.mean(A[-1], axis=0)# A = A - A_meanif not os.path.exists('plots'):    os.makedirs('plots')# Generate plotsfor i in range(n_features-1, -1, -1):    fig = plt.figure()    plt.plot(X, [0 for temp in X], 'k-', linewidth=0.5)    plt.plot([0 for temp in X], X, 'k-', linewidth=0.5)    # plt.plot(X, Y[0], 'b--', linewidth=1,    #          label='PC 1 - ({}/{}) * x'.format(components[0][0], components[0][1]))    # plt.plot(X, Y[1], 'b-.', linewidth=1,    #          label='PC 2 - ({}/{}) * x'.format(components[1][0], components[1][1]))    # plt.plot(X + A_mean[0], Y[0] + A_mean[1], 'b--', linewidth=1,    #          label='PC 1 - ({}/{}) * x'.format(components[0][1], components[0][0]))    # plt.plot(X + A_mean[0], Y[1] + A_mean[1], 'b-.', linewidth=1,    #          label='PC 2 - ({}/{}) * x'.format(components[1][1], components[1][0]))    plt.plot(X + A_mean[0], Y[0] + A_mean[1], 'b--', linewidth=1, label='CP 1')    plt.plot(X + A_mean[0], Y[1] + A_mean[1], 'b-.', linewidth=1, label='CP 2')    # plt.plot(X, Y2, 'g-', label='Least Squares Regression')    plt.plot(A[i][:, 0], A[i][:, 1], 'rx', label='observações'.decode('utf-8'))    plt.xlim(-1.5, 4.5)    plt.ylim(-1.5, 4.5)    plt.grid(linestyle=':')    plt.legend()    plt.savefig(os.path.join('plots', 'inClassExample_{}comp_plot.png'.format(i+1)))    plt.show()fig = plt.figure()plt.plot(X, [0 for temp in X], 'k-', linewidth=0.5)plt.plot([0 for temp in X], X, 'k-', linewidth=0.5)plt.plot(X + A_mean[0], Y[0] + A_mean[1], 'b--', linewidth=1, label='CP 1')plt.plot(X + A_mean[0], Y[1] + A_mean[1], 'b-.', linewidth=1, label='CP 2')plt.plot(X, Y2, 'g-', label='Regressão MMQ'.decode('utf-8'))plt.plot(A[1][:, 0], A[1][:, 1], 'rx', label='observações'.decode('utf-8'))plt.xlim(-1.5, 4.5)plt.ylim(-1.5, 4.5)# plt.xlabel('x'.decode('utf-8'))# plt.ylabel('y'.decode('utf-8'))plt.grid(linestyle=':')plt.legend()plt.savefig(os.path.join('plots', 'inClassExample_PCAxLSM_plot.png'))plt.show()